import { Injectable, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BrowserXhr, Headers, Http, RequestOptions } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { TimeoutError } from 'rxjs/Rx';
import 'rxjs/add/operator/timeout';
import 'rxjs/add/operator/map';
import { Observable as Observable$1 } from 'rxjs';
import { Subject } from 'rxjs/Subject';

var ERROR_JSON_PARSE = 'json-parse-error--maybe-server-error--maybe-php-error';
var ERROR_NO_ERROR_CODE = "no-error-code-on-isError()-is-considered-as-an-error";
var ERROR_NO_INTERNET = 'You have no Internet. Or the Internet is very slow.';
var ERROR_TIMEOUT = 'http-get-post-request-timeout';
var ERROR_MC_IS_EMPTY = 'mc-is-empty';
var ERROR_INTERNAL_SERVER_ERROR = 'internal-server-error';
var ERROR_SESSION_ID_EXIST = 'error-session-id-must-not-be-submitted';
var ERROR_USER_NOT_FOUND = -40108;
var ERROR_WRONG_SESSION_ID = -401081;
var ERROR_WRONG_SESSION_ID_NO_USER_DATA_BY_THAT_SESSION_ID = ERROR_WRONG_SESSION_ID;
var API_KEY_SESSION_INFO = 'user-session-id';
/**
 *
 *      N E W   E R R O R   RESPONSES
 *
 *
 */
var ERROR_NO_FILE_SELECTED = -40010;
var RES_ERROR_NO_FILE_SELECTED = { code: ERROR_NO_FILE_SELECTED, message: "no-file-selected-to-upload" };
var ERROR_DISCONNECTED = -80011;
var RES_ERROR_DISCONNECTED = { code: ERROR_DISCONNECTED, message: 'You have no internet. Please check if you are online.' };
var ERROR_REQUIRED_INPUT_IS_MISSING = -40044;
var RES_ERROR_REQUIRED_INPUT_IS_MISSING = { code: ERROR_REQUIRED_INPUT_IS_MISSING, message: 'Required variable is missing.' };
var ERROR_MODEL_IS_EMPTY = -4090;
var RES_ERROR_MODEL_IS_EMPTY = { code: ERROR_MODEL_IS_EMPTY, message: "model-is-empty" };
var ERROR_MODEL_IDX_IS_EMPTY = -4090;
var RES_ERROR_MODEL_IDX_EMPTY = { code: ERROR_MODEL_IS_EMPTY, message: "model-idx-empty" };
var ERROR_CODE_IS_EMPTY = -4090;
var RES_ERROR_MODEL_CODE_EMPTY = { code: ERROR_MODEL_IS_EMPTY, message: "model-code-empty" };

//export const URL_BACKEND_API = 'http://localhost/www/backend/index.php';
// export const URL_BACKEND_API = 'http://backend.dev/index.php';
// export const URL_BACKEND_API = 'http://localhost:8000/index.php';
//
//export const URL_BACKEND_API = '//backend.sonub.com/index.php'; // real server
var URL_BACKEND_API = 'http://backend.org/index.php'; // Mr. Song's test server.
// Mr. Song's test server.
var BACKEND_API_CONNECTION_TIMEOUT = 45000; // request time out
// request time out
var NO_OF_ITEMS_PER_PAGE = 5;

var Api = (function () {
    /**
     * @param {?} http
     */
    function Api(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    Api.prototype.setBackendUrl = function (url) {
        window['url_backend_api'] = url;
    };
    /**
     * @return {?}
     */
    Api.prototype.getBackendUrl = function () {
        if (window['url_backend_api'] !== void 0)
            return window['url_backend_api'];
        else
            return "http://backend.sonub.com/index.php";
    };
    /**
     *
     * Returns 'Observable' which gives an Object of 'sucess' or 'error' from PHP Backend.
     *
     * \@attension If there is error on json(), then 'error' callback will be called on subscribe.
     *      만약, json() 또는 JSON.parse() 에서 에러가 발생하면, subscribe() 을 에러 콜백이 호출된다.
     * @param {?} url
     * @param {?=} option
     * @return {?}
     */
    Api.prototype.get = function (url, option) {
        if (option === void 0) { option = {}; }
        //return this.http.get( url )
        return this.processQuery(/** @type {?} */ (this.http.get(url)), option);
    };
    /**
     *
     *
     * Returns 'Observable' which gives an Object of 'sucess' or 'error' from PHP Backend.
     *
     * @param {?} data
     * @param {?=} option
     * @return {?}
     */
    Api.prototype.post = function (data, option) {
        if (option === void 0) { option = {}; }
        var /** @type {?} */ session_id = this.getSessionId();
        console.log('post session_id: ', session_id);
        if (session_id) {
            data['session_id'] = session_id;
        }
        else {
            console.log("session id is undefiend. so, it not set.");
            console.log(data);
        }
        data = this.buildQuery(data);
        var /** @type {?} */ url = this.getBackendUrl() + '?' + data;
        console.log("post: ", url); // debug in console
        var /** @type {?} */ o = this.http.post(this.getBackendUrl(), data, this.requestOptions);
        return this.processQuery(o, option);
    };
    Object.defineProperty(Api.prototype, "requestOptions", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
            var /** @type {?} */ options = new RequestOptions({ headers: headers });
            return options;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Api.prototype.version = function () {
        return this.get(this.getBackendUrl() + '?route=version');
    };
    /**
     * @return {?}
     */
    Api.prototype.errorCall = function () {
        return this.get(this.getBackendUrl() + '?route=system.error');
    };
    /**
     * @return {?}
     */
    Api.prototype.successCall = function () {
        return this.version();
    };
    /**
     * @return {?}
     */
    Api.prototype.scriptError = function () {
        return this.get(this.getBackendUrl() + '?route=system.scriptError');
    };
    /**
     * @return {?}
     */
    Api.prototype.timeoutError = function () {
        return this.get(this.getBackendUrl() + '?route=system.timeoutError', { 'timeout': 1000 });
    };
    /**
     * @return {?}
     */
    Api.prototype.internalServerError = function () {
        return this.get(this.getBackendUrl() + '?route=system.internalServerError');
    };
    /**
     * @return {?}
     */
    Api.prototype.routeMethodError = function () {
        return this.get(this.getBackendUrl() + '?route=system.routeMethodError');
    };
    /**
     * @return {?}
     */
    Api.prototype.routeRequiredError = function () {
        return this.get(this.getBackendUrl() + '?route=system.routeRequiredError');
    };
    /**
     * @param {?} o
     * @param {?=} option
     * @return {?}
     */
    Api.prototype.processQuery = function (o, option) {
        var _this = this;
        if (option === void 0) { option = {}; }
        var /** @type {?} */ timeout = BACKEND_API_CONNECTION_TIMEOUT;
        if (option['timeout'] !== void 0)
            timeout = option['timeout'];
        return o
            .timeout(timeout)
            .catch(function (err) {
            //console.log("catch() after .timeout()");
            //console.log(err);
            if (err instanceof TimeoutError) {
                return Observable.throw(_this.errorResponse(ERROR_TIMEOUT));
            }
            return Observable.throw(err);
        })
            .map(function (e) {
            ///
            // console.log('response body:', e['_body']); // debug. comment out to see errors from server.
            if (e['_body'] == '')
                throw _this.errorResponse(-408, 'response-is-empty.');
            if (((e['_body'])).charAt(0) != '{') {
                console.info("Maybe error");
                console.log(e['_body']);
            }
            var /** @type {?} */ re = e.json();
            if (_this.isError(re)) {
                throw re;
            }
            else
                return re;
        })
            .catch(function (err) {
            console.log('Api::processQuery(): caught an error: ', err);
            if (err instanceof SyntaxError) {
                console.error(err); // debug
                return Observable.throw(_this.errorResponse(ERROR_JSON_PARSE)); // JSON 에러
            }
            else if (err && err['code'] !== void 0 && err['code'] < 0)
                return Observable.throw(err); // 프로그램 적 에러
            else if (err['_body'] && err['_body']['total'] == 0 && err['_body']['type'] == 'error') {
                return Observable.throw(RES_ERROR_DISCONNECTED);
            }
            else
                return Observable.throw(err);
        });
    };
    /**
     *
     *
     *
     * @param {?} code
     * @param {?} message
     * @return {?}
     */
    Api.prototype.error = function (code, message) {
        return Observable.throw(this.errorResponse(code, message));
    };
    /**
     *
     * \@code
     *      this.errorResponse( 'error-code' ); // Simply put error code
     *      this.errorResponse( -1234, 'error-message' ); // Error code with message. error code must be less than 0
     * \@endcode
     *
     * @param {?} error_code
     * @param {?=} error_message
     *
     * @return {?}
     */
    Api.prototype.errorResponse = function (error_code, error_message) {
        if (error_message === void 0) { error_message = ''; }
        if (error_message) {
            return { code: error_code, message: error_message };
        }
        else {
            return {
                code: -999,
                message: error_code
            };
        }
    };
    Object.defineProperty(Api.prototype, "logged", {
        /**
         *
         * @return {?}
         */
        get: function () {
            if (this.getSessionId())
                return true;
            else
                return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Api.prototype, "admin", {
        /**
         * @return {?}
         */
        get: function () {
            if (this.getSessionId()) {
                if (this.info.admin)
                    return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * @param {?} res - it can by any interface ( type ) as long as it has res.data.sessoin_id
     * @return {?}
     */
    Api.prototype.setSessionInfo = function (res) {
        if (res === void 0 || res.data === void 0 || res.data.session_id === void 0) {
            // No session_id will be returned if admin edits user info.
            // alert("CRITICAL ERROR: sessionSessionId() - please report this to admin.");
            return;
        }
        localStorage.setItem(API_KEY_SESSION_INFO, JSON.stringify(res.data));
    };
    /**
     * @return {?}
     */
    Api.prototype.getSessionId = function () {
        return this.info.session_id;
        // let info = this.getSessionInfo();
        // // console.info(info);
        // if ( info ) return info.session_id;
        // // return localStorage.getItem( API_KEY_SESSION_INFO );
        // else return null;
    };
    Object.defineProperty(Api.prototype, "info", {
        /**
         * this.info.id
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ data = localStorage.getItem(API_KEY_SESSION_INFO);
            //console.log(data);
            if (data) {
                try {
                    return JSON.parse(data);
                }
                catch (e) {
                }
            }
            return ({});
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Deletes 'login session information' from localStorage.
     * @return {?}
     */
    Api.prototype.deleteSessionInfo = function () {
        localStorage.removeItem(API_KEY_SESSION_INFO);
    };
    /**
     * return true if the obj is error ( or error response )
     *
     *
     *
     * \@code
     *
     * if ( this.file.isError(err) ) return;
     * \@endcode
     *
     * @param {?} obj
     *      obj must be a form of "{ code: -123, message: 'error message'}"
     *      if 'code' does not exist, it is considered as an ERROR.
     *      if 'code' is less than 0, then it is an error.
     *
     *      { code: ... } 에서 code 값이 없거나 참의 값이면 에러로 간주한다.
     *
     * 참고로 internal sever error 의 경우에는 code 값이 없으로 '참'을 리턴한다.
     *
     * @return {?}
     *      truthy value if the object is an error response.
     *      false if no error.
     */
    Api.prototype.isError = function (obj) {
        if (obj) {
            if (obj['code'] === void 0)
                return ERROR_NO_ERROR_CODE; // if obj.code not exist.
            if (obj['code'])
                return obj['code']; // if obj.code is not 0.
        }
        return false;
    };
    /**
     * Returns true if it is an internal server error response.
     *
     *
     * @param {?} obj
     * @return {?}
     */
    Api.prototype.isInternalServerError = function (obj) {
        return typeof obj['status'] !== void 0 && obj['status'] == 500;
    };
    /**
     *
     * @param {?} error
     * @return {?}
     */
    Api.prototype.getErrorString = function (error) {
        if (error['status'] !== void 0 && error['status']) {
            if (error['status'] == 500)
                return "500 ( INTERNAL SERVER ERROR ) : It is a server error.";
            else
                return "ERROR RESPONSE CODE: " + error['status'];
        }
        else if (error === void 0) {
            return 'No error data';
        }
        else if (error['code'] == void 0) {
            console.log("api::getErrorString() => ERROR: No error code on error: The error is: ", error);
            return "No error code. 'code' is undefined.";
        }
        else if (error['message'] == ERROR_JSON_PARSE) {
            return "ERROR: JSON PARSE ERROR: This may be PHP script error. " + error['message'];
        }
        else if (error['message'] == ERROR_TIMEOUT) {
            return "ERROR: JSON PARSE ERROR: This may be PHP script error. " + error['message'];
        }
        else if (typeof error['code'] != 'undefined') {
            return ("ERROR: " + error['code'] + " : " + error['message']);
        }
        else {
            return "unhandled error: ";
            // alert("CRITICAL - UNHANDLED ERROR"); // this should never happen
        }
    };
    /**
     *
     * This simply alerts error message on browser.
     *
     * @param {?} error
     * @return {?}
     */
    Api.prototype.alert = function (error) {
        alert(this.getErrorString(error));
    };
    /**
     * Returns the body of POST method.
     *
     * \@attention This addes 'module', 'submit'. If you don't needed just user http_build_query()
     *
     * @param {?} params must be an object.
     * @return {?}
     */
    Api.prototype.buildQuery = function (params) {
        // params[ 'module' ] = 'ajax'; // 'module' must be ajax.
        // params[ 'submit' ] = 1; // all submit must send 'submit'=1
        return this.http_build_query(params);
    };
    /**
     * @param {?} formdata
     * @param {?=} numericPrefix
     * @param {?=} argSeparator
     * @return {?}
     */
    Api.prototype.http_build_query = function (formdata, numericPrefix, argSeparator) {
        if (numericPrefix === void 0) { numericPrefix = ''; }
        if (argSeparator === void 0) { argSeparator = ''; }
        var /** @type {?} */ urlencode = this.urlencode;
        var /** @type {?} */ value;
        var /** @type {?} */ key;
        var /** @type {?} */ tmp = [];
        var /** @type {?} */ _httpBuildQueryHelper = function (key, val, argSeparator) {
            var /** @type {?} */ k;
            var /** @type {?} */ tmp = [];
            if (val === true) {
                val = '1';
            }
            else if (val === false) {
                val = '0';
            }
            if (val !== null) {
                if (typeof val === 'object') {
                    for (k in val) {
                        if (val[k] !== null) {
                            tmp.push(_httpBuildQueryHelper(key + '[' + k + ']', val[k], argSeparator));
                        }
                    }
                    return tmp.join(argSeparator);
                }
                else if (typeof val !== 'function') {
                    return urlencode(key) + '=' + urlencode(val);
                }
                else {
                    throw new Error('There was an error processing for http_build_query().');
                }
            }
            else {
                return '';
            }
        };
        if (!argSeparator) {
            argSeparator = '&';
        }
        for (key in formdata) {
            value = formdata[key];
            if (numericPrefix && !isNaN(key)) {
                key = String(numericPrefix) + key;
            }
            var /** @type {?} */ query = _httpBuildQueryHelper(key, value, argSeparator);
            if (query !== '') {
                tmp.push(query);
            }
        }
        return tmp.join(argSeparator);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    Api.prototype.urlencode = function (str) {
        str = (str + '');
        return encodeURIComponent(str)
            .replace(/!/g, '%21')
            .replace(/'/g, '%27')
            .replace(/\(/g, '%28')
            .replace(/\)/g, '%29')
            .replace(/\*/g, '%2A')
            .replace(/%20/g, '+');
    };
    /**
     *
     * @deprecated This is in wrong place
     *
     * It gets 'YYYY-MM-DD' input value from form 'date' input and splits into 'birth_year', 'birth_month', 'birth_day'.
     *
     *
     * @param {?} u - user form.
     * @return {?}
     */
    Api.prototype.splitBirthdays = function (u) {
        u.birth_year = 0;
        u.birth_month = 0;
        u.birth_day = 0;
        if (u['birthday'] !== void 0 && u['birthday'] && ((u['birthday'])).indexOf('-') != -1) {
            var /** @type {?} */ dates = ((u['birthday'])).split('-');
            if (dates.length == 3) {
                u.birth_year = dates[0];
                u.birth_month = dates[1];
                u.birth_day = dates[2];
            }
        }
        return u;
    };
    /**
     *
     * @deprecated This is in wrong place
     *
     * @param {?} d
     * @return {?}
     */
    Api.prototype.mk2c = function (d) {
        if (d < 10)
            return '0' + d;
        else
            return d;
    };
    /**
     *
     * @deprecated This is in wrong place
     *
     * @param {?} u
     * @return {?}
     */
    Api.prototype.composeBirthday = function (u) {
        if (u['birth_day'] !== void 0) {
            u['birthday'] = u['birth_year'] + '-' + this.mk2c(u['birth_month']) + '-' + this.mk2c(u['birth_day']);
        }
        return u;
    };
    return Api;
}());

// import { Optional } from '@angular/core';
var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Base = (function (_super) {
    __extends$1(Base, _super);
    /**
     * @param {?} http
     * @param {?} taxonomy
     */
    function Base(http, taxonomy) {
        var _this = _super.call(this, http) || this;
        _this.taxonomy = taxonomy;
        return _this;
    }
    /**
     *
     *
     *
     * \@code example code.
     * this.config.list( {} ).subscribe( res => {
     * console.log(res);
     * }, err => {
     * console.log(err);
     * });
     *
     * \@endcode
     *
     * \@code
     * this.config.list( {page: 2} ).subscribe( res => { } ); // get items of page no 2 of post_config
     * this.user.list( { page: 2, limit: 3 } ).subscribe( res => { }); // get 2nd page of users. A pages has 3 users.
     * this.config.list( { page: 1, limit: 3, where: 'id LIKE ?', bind: 'my%' } ).subscribe( res => { } ); // get upto 3 post_configs whose id begins with 'my'
     * this.config.list( { limit: 1, where: 'id LIKE ?', bind: 'my%', order: 'idx DESC' } ).subscribe( res => {} ); // get the newly created post_config whose id begins with 'my'. only one data will be returned.
     * \@endcode
     *
     * @param {?=} req
     *
     * @return {?}
     */
    Base.prototype.list = function (req) {
        if (req === void 0) { req = {}; }
        req['route'] = this.taxonomy + '.list';
        /**
         * @deprecated code. // Pagination helper.
         *
         * To make it clear and easy understanding,
         *
         */
        // if ( ! req['limit'] ) req.limit = NO_OF_ITEMS_PER_PAGE;
        // if ( req['page'] ) {
        //     let page = req['page'] > 0 ? req['page'] : 1;
        //     let limit = req.limit;
        //     req.from =  ( page - 1 ) * limit;
        //     delete( req.page );
        // }
        //
        // req.session_id = this.getSessionId();
        return this.post(req);
    };
    /**
     * @param {?=} req
     * @return {?}
     */
    Base.prototype.create = function (req) {
        if (req === void 0) { req = {}; }
        req['route'] = this.taxonomy + '.create';
        return this.post(req);
    };
    /**
     *
     *
     * \@note It does forcing type match.
     * @param {?} idx
     * @return {?}
     */
    Base.prototype.delete = function (idx) {
        var /** @type {?} */ req = {
            route: this.taxonomy + '.delete'
        };
        /// bug fix: if idx is numeric, then it is a number.
        var /** @type {?} */ no = parseInt(idx);
        if (Number.isInteger(no))
            req.idx = idx;
        else
            req.id = idx;
        return ((this.post(req)));
    };
    /**
     * @param {?=} req
     * @return {?}
     */
    Base.prototype.edit = function (req) {
        if (req === void 0) { req = {}; }
        req['route'] = this.taxonomy + '.edit';
        return this.post(req);
    };
    /**
     * @param {?} idx
     * @return {?}
     */
    Base.prototype.data = function (idx) {
        var /** @type {?} */ req = {
            route: this.taxonomy + '.data'
        };
        if (idx) {
            if (!isNaN(idx))
                req.idx = idx;
            else
                req.id = idx;
        }
        return this.post(req);
    };
    /**
     * @param {?} idx
     * @param {?=} choice
     * @return {?}
     */
    Base.prototype.vote = function (idx, choice) {
        if (choice === void 0) { choice = 'G'; }
        var /** @type {?} */ req = {
            route: this.taxonomy + '.vote',
            idx: idx,
            choice: choice
        };
        return ((this.post(req)));
    };
    /**
     * @param {?} idx
     * @return {?}
     */
    Base.prototype.report = function (idx) {
        var /** @type {?} */ req = {
            route: this.taxonomy + '.report',
            idx: idx
        };
        return ((this.post(req)));
    };
    /**
     *
     * Common api.
     *
     * @param {?} idx
     * @return {?}
     */
    Base.prototype.fileUrl = function (idx) {
        return this.getBackendUrl() + '?route=download&idx=' + idx;
    };
    return Base;
}(Api));

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Backend = (function (_super) {
    __extends(Backend, _super);
    /**
     * @param {?} http
     */
    function Backend(http) {
        var _this = _super.call(this, http, '') || this;
        console.log("Backend constructor:");
        return _this;
    }
    return Backend;
}(Base));
Backend.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Backend.ctorParameters = function () { return [
    { type: Http, },
]; };

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Meta = (function (_super) {
    __extends$2(Meta, _super);
    /**
     * @param {?} http
     */
    function Meta(http) {
        return _super.call(this, http, 'meta') || this;
    }
    return Meta;
}(Base));
Meta.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Meta.ctorParameters = function () { return [
    { type: Http, },
]; };

var __extends$3 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var User = (function (_super) {
    __extends$3(User, _super);
    /**
     * @param {?} http
     */
    function User(http) {
        return _super.call(this, http, 'user') || this;
    }
    /**
     *
     *
     * Gets user data from backend.
     *
     * \@note User can only get his data. so, no need to get 'session_id' as parameter. Just get it from localStorage.
     *
     *
     * \@code
     * let req : USER_REGISTER_REQUEST_DATA = {
     * id:         this.id,
     * password:   this.password,
     * name:       this.name,
     * nickname:   this.nickname,
     * email:      this.email,
     * mobile:     this.mobile,
     * landline:   this.landline,
     * gender:     this.gender,
     * birthday:   this.birthday,
     * meta:       {
     * type: this.type,
     * classid: 'my-skype-id'
     * }
     * }
     * console.log(req);
     * this.user.register( req, ( res: USER_REGISTER_RESPONSE_DATA ) => {
     * console.info('register success: ', res);
     * },
     * error => alert(error),
     * () => console.log('user registration complete') );
     * \@endcode
     * @param {?=} id
     * @return {?}
     */
    User.prototype.data = function (id) {
        // if id is empty, it will get self data.
        // if ( id === void 0 ) id = this.info.id;
        if (this.logged == false)
            return this.error(-420, 'login-first-before-get-user-info');
        return _super.prototype.data.call(this, id);
    };
    /**
     * @param {?} req
     * @return {?}
     */
    User.prototype.register = function (req) {
        var _this = this;
        if (req.id === void 0 || !req.id)
            return this.error(-4291, 'user-id-is-required-for-register');
        if (req.password === void 0 || req.password.length < 5)
            return this.error(-4292, 'password-is-required-and-must-be-at-least-5-characters-long-for-register');
        req.route = 'register';
        return this.post(req)
            .map(function (res) {
            _this.setSessionInfo(res);
            return res;
        });
        // user.register( ... ) . subscribe( ( re: _USER_CREATE_RESPONSE) => {} )
    };
    /**
     * @param {?} req
     * @return {?}
     */
    User.prototype.edit = function (req) {
        var _this = this;
        console.log('edit::req', req);
        if (this.logged == false)
            return this.error(-421, 'login-first-before-edit');
        // if ( req['id'] !== void 0 ) return this.error( -422, 'id-has-passed-over-form-submission--user-cannot-edit-id') );
        if (req['password'] !== void 0)
            return this.error(-423, 'password-has-passed-over-form-submission--user-cannot-edit-password-on-edit-form');
        return _super.prototype.edit.call(this, req)
            .map(function (res) {
            //console.log('edit res: ', res );
            _this.setSessionInfo(res);
            return res;
        });
    };
    /**
     * @param {?} req
     * @return {?}
     */
    User.prototype.login = function (req) {
        var _this = this;
        req.route = 'login';
        return this.post(req)
            .map(function (res) {
            _this.setSessionInfo(res);
            return res;
        });
    };
    /**
     * @return {?}
     */
    User.prototype.logout = function () {
        var /** @type {?} */ req = {
            route: 'logout'
        };
        var /** @type {?} */ observable = this.post(req);
        this.deleteSessionInfo();
        return observable;
    };
    /**
     * @param {?} req
     * @return {?}
     */
    User.prototype.changePassword = function (req) {
        var _this = this;
        req.route = 'change_password';
        return this.post(req)
            .map(function (res) {
            _this.deleteSessionInfo();
            return res;
        });
    };
    return User;
}(Base));
User.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
User.ctorParameters = function () { return [
    { type: Http, },
]; };

var TestAll = (function () {
    /**
     * @param {?} backend
     * @param {?} meta
     * @param {?} user
     */
    function TestAll(backend, meta, user) {
        this.backend = backend;
        this.meta = meta;
        this.user = user;
        this.count = 0;
        console.log("TestAll constructor:");
    }
    /**
     * @return {?}
     */
    TestAll.prototype.run = function () {
        var _this = this;
        this.testApi(); // api itself.
        this.testServer(); // basic server & backend protocol test.     
        this.doLogout(function () { return _this.userRegisterGetUpdateLogout(); }); // try logout first, then do register update logout
        this.testMeta(); //Test on Meta
        // this.logout.subscribe( () => this.doLogout() );
        //this.register.subscribe( callback => this.doRegister( callback ) );
        //this.login.subscribe( o => this.doLogin( o ) );
        //this.userUpdate.subscribe( session_id => this.doGetUserData( () => this.doUserUpdate() ) );
        // this.testLogout();
        //this.testUserRegister();
        //this.session_id.subscribe( id => this.testLogin() );
        // this.login_session_id.subscribe( session_id => this.testGetUserData( () => this.testUserUpdate() ) );
        //this.update_session_id.subscribe( x => this.logout.next() );
    };
    /**
     * @return {?}
     */
    TestAll.prototype.userRegisterGetUpdateLogout = function () {
        var _this = this;
        this.doRegister(function (req, res) { return _this.doLogin(req, function () {
            _this.doGetUserData(function () { return _this.doUserUpdate(function () { return _this.doLogout(); }); });
        }); });
    };
    /**
     * @param {?=} callback
     * @return {?}
     */
    TestAll.prototype.doLogout = function (callback) {
        var _this = this;
        console.log("doLogout() begin");
        if (this.user.logged) {
            this.user.logout().subscribe(function (res) {
                _this.success("logout() : ", res);
                if (callback)
                    callback(res);
            }, function (err) {
                _this.error(err);
            });
        }
        else {
            if (callback)
                callback();
        }
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    TestAll.prototype.doRegister = function (callback) {
        var _this = this;
        var /** @type {?} */ id = 'user' + (new Date).getMinutes() + Math.round((Math.random() * 100000));
        var /** @type {?} */ req = {
            id: id,
            password: id,
            email: id + '@gmail.com',
            name: id,
            mobile: '09174678000',
            gender: 'M'
        };
        this.user.register(req).subscribe(function (res) {
            _this.success("User registration:\n " + res.data.session_id);
            callback(req, res);
        }, function (error) {
            console.log("ERROR: doRegister()");
            _this.error(error);
        });
    };
    /**
     * @param {?} o
     * @param {?} callback
     * @return {?}
     */
    TestAll.prototype.doLogin = function (o, callback) {
        var _this = this;
        this.user.login({ id: o.id, password: o.password }).subscribe(function (res) {
            _this.success("User Login:\n " + res.data.session_id);
            /// this.login_session_id.next(res.data.session_id);
            callback(res);
        }, function (error) {
            console.log("doLogin() => login failed.");
            _this.error(error);
        });
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    TestAll.prototype.doGetUserData = function (callback) {
        var _this = this;
        this.user.data().subscribe(function (res) {
            _this.success("User Get Data: ");
            console.log(res['data']['user']);
            callback();
        }, function (error) {
            _this.error("getUserData() : error : " + error);
        });
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    TestAll.prototype.doUserUpdate = function (callback) {
        var _this = this;
        var /** @type {?} */ record = ({});
        this.user.edit(record).subscribe(function (res) {
            _this.success("userUpdate() : ", res);
            //this.update_session_id.next( res.data.session_id );
            // this.logout.next();
            callback(res);
        }, function (err) {
            _this.error("userUpdate(): " + err);
        });
    };
    /**
     * @param {?} str
     * @param {...?} vars
     * @return {?}
     */
    TestAll.prototype.success = function (str) {
        var vars = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            vars[_i - 1] = arguments[_i];
        }
        this.count++;
        console.info("[" + this.count + "] SUCCESS: " + str, vars);
    };
    /**
     * @param {?} err
     * @return {?}
     */
    TestAll.prototype.getErrorString = function (err) {
        return this.backend.getErrorString(err);
    };
    /**
     *
     * @param {?} error
     * @param {?=} message
     * @return {?}
     */
    TestAll.prototype.error = function (error, message) {
        if (message === void 0) { message = ''; }
        this.count++;
        var /** @type {?} */ error_string = this.getErrorString(error);
        console.error("[" + this.count + "] ERROR: " + message + " - " + error_string);
    };
    /**
     * @return {?}
     */
    TestAll.prototype.testApi = function () {
        var _this = this;
        console.log('url:', this.backend.getBackendUrl());
        this.backend.version().subscribe(function (res) {
            _this.success("version check: " + res['data'].version);
        }, function (err) {
            _this.error("version error: ", _this.getErrorString(err));
        });
    };
    /**
     * @return {?}
     */
    TestAll.prototype.testServer = function () {
        var _this = this;
        this.backend.successCall().subscribe(function (re) {
            _this.success("Version: " + re['data']['version']);
        }, function (err) {
            _this.error(err, "successCall Test: ");
        });
        this.backend.errorCall().subscribe(function (re) {
            _this.error(re, 'This should be an error. But success ' + _this.backend.getErrorString(re));
        }, function (error) {
            _this.success("errorCall() : This is fake error. " + _this.backend.getErrorString(error));
        });
        // this.backend.internalServerError().subscribe( re => {
        //     this.error("This must be 500 internal server error. but success");
        // }, error => {
        //     console.log(error);
        //     if ( this.backend.isInternalServerError( error ) ) this.success("Internal Server Error: " + this.backend.getErrorString(error) );
        //     else this.error(error, "This must be 500 - internal server error. but it is another error.");
        // });
        // setTimeout( () => {
        //     this.backend.scriptError().subscribe( re => {
        //         console.log(re);
        //         this.error( re, "scriptError() - This should be script error. But success." );
        //     }, error => {
        //         console.log( error );
        //         this.success( 'This should be script error. This is PHP script error.' );
        //     });
        // }, 100 );
        this.backend.timeoutError().subscribe(function (re) {
            _this.error(re, "This should be timeout error. But success.");
        }, function (error) {
            if (error.message == ERROR_TIMEOUT) {
                _this.success('This should be timeout error.' + _this.backend.getErrorString(error));
            }
            else {
                _this.error("This is not timeout error. But another error" + error);
            }
        });
        // route error
        this.backend.routeMethodError().subscribe(function (re) {
            _this.error(re, "Must be error");
        }, function (error) {
            _this.success("Route Error" + error);
        });
        // expect: error
        this.backend.routeRequiredError().subscribe(function (re) {
            _this.error(re, "Must be error");
        }, function (error) {
            _this.success("Route required variable error: name is missing.");
        });
    };
    /**
     * @return {?}
     */
    TestAll.prototype.testMeta = function () {
        var _this = this;
        this.doLogout(function () {
            /**
             * Try to create a meta with logout.
             * expect: error
             */
            _this.meta.create().subscribe(function (res) {
                _this.error("shoud-be-error | this must be error");
            }, function (err) {
                if (err['code'] == ERROR_REQUIRED_INPUT_IS_MISSING) {
                    _this.success("user logged out. no session id error.");
                }
                else
                    _this.error(err);
            });
        });
        this.doRegister(function (req, res) {
            // error test
            // expect: error
            _this.meta.create().subscribe(function (res) {
                _this.error("shoud-be-error | this must be error");
            }, function (err) {
                if (err['code'] == ERROR_MODEL_IDX_IS_EMPTY) {
                    _this.success("model-idx-is-empty");
                }
                else
                    _this.error(err);
            });
            // success test`
            // expect: success
            var /** @type {?} */ meta_req = {
                model: 'test',
                model_idx: 1,
                code: 'oo'
            };
            _this.meta.create(meta_req).subscribe(function (res) {
                _this.success('this.meta.create( req ) ', res);
                _this.meta.data(res.data.meta.idx).subscribe(function (res) {
                });
            }, function (err) { return _this.error(err); });
        });
    };
    return TestAll;
}());
TestAll.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
TestAll.ctorParameters = function () { return [
    { type: Backend, },
    { type: Meta, },
    { type: User, },
]; };

var __extends$4 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Category = (function (_super) {
    __extends$4(Category, _super);
    /**
     * @param {?} http
     */
    function Category(http) {
        return _super.call(this, http, 'category') || this;
    }
    return Category;
}(Base));
Category.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Category.ctorParameters = function () { return [
    { type: Http, },
]; };

var ProgressService = (function () {
    function ProgressService() {
        //downloadProgress: Subject<any> = new Subject();
        this.uploadProgress = new Subject();
    }
    return ProgressService;
}());
ProgressService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ProgressService.ctorParameters = function () { return []; };

var __extends$5 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var File = (function (_super) {
    __extends$5(File, _super);
    /**
     * @param {?} http
     * @param {?} progress
     */
    function File(http, progress) {
        var _this = _super.call(this, http, 'file') || this;
        _this.progress = progress;
        _this.percentage = 0;
        return _this;
    }
    /**
     * @param {?} req
     * @param {?} file
     * @param {?=} callback
     * @return {?}
     */
    File.prototype.upload = function (req, file, callback) {
        var _this = this;
        if (file === void 0 || file.name === void 0) {
            return Observable$1.throw(RES_ERROR_NO_FILE_SELECTED);
        }
        var /** @type {?} */ session_id = this.getSessionId();
        var /** @type {?} */ formData = new FormData();
        formData.append('userfile', file, file.name);
        formData.append('route', 'upload');
        if (session_id)
            formData.append('session_id', session_id);
        if (req['model'])
            formData.append('model', req.model);
        if (req['model_idx'])
            formData.append('model_idx', req.model_idx);
        if (req['code'])
            formData.append('code', req.code);
        if (req['unique'])
            formData.append('unique', req.unique);
        if (req['finish'])
            formData.append('finish', req.finish);
        console.log(file);
        console.log(formData);
        var /** @type {?} */ o = this.http.post(this.getBackendUrl(), formData);
        var /** @type {?} */ subscription = this.progress.uploadProgress.subscribe(function (res) {
            // console.log("progress: ", res);
            // console.log('total::', res.total, 'Loaded::', res.loaded);
            _this.percentage = Math.round(res.loaded / res.total * 100);
            // console.log('this.percentage::',this.percentage);
            // console.log(subscription);
            if (callback)
                callback(_this.percentage);
            if (_this.percentage == 100)
                subscription.unsubscribe();
        });
        return this.processQuery(o);
    };
    /**
     * @param {?} idx
     * @return {?}
     */
    File.prototype.url = function (idx) {
        return this.fileUrl(idx);
    };
    /**
     * @param {?} option
     * @return {?}
     */
    File.prototype.src = function (option) {
        var /** @type {?} */ url = this.url(option.idx);
        if (option['width'])
            url += 'width=' + option.width;
        if (option['height'])
            url += 'height=' + option.height;
        if (option['quality'])
            url += 'quality=' + option.quality;
        if (option['resize'])
            url += 'resize=' + option.resize;
        console.log('file.src() returns: ', url);
        return url;
    };
    /**
     * @param {?} file
     * @param {?=} callback
     * @return {?}
     */
    File.prototype.uploadAnonymousPrimaryPhoto = function (file, callback) {
        var /** @type {?} */ req = {
            model: 'user',
            code: 'primary_photo'
        };
        return this.upload(req, file, callback);
    };
    /**
     * @param {?} file
     * @param {?=} callback
     * @return {?}
     */
    File.prototype.uploadUserPrimaryPhoto = function (file, callback) {
        var /** @type {?} */ req = {
            model: 'user',
            model_idx: this.info.idx,
            code: 'primary_photo',
            unique: 'Y',
            finish: 'Y'
        };
        console.log("uploadUserPrimaryPhoto : ", req);
        return this.upload(req, file, callback);
    };
    /**
     * @param {?} file
     * @param {?=} callback
     * @return {?}
     */
    File.prototype.uploadPrimaryPhoto = function (file, callback) {
        console.log("uploadPrimaryPhoto: ");
        if (this.logged)
            return this.uploadUserPrimaryPhoto(file, callback);
        else
            return this.uploadAnonymousPrimaryPhoto(file, callback);
    };
    /**
     *
     * File upload for post
     *
     *
     * \@code
     * onChangeFile( _ ) {
     * this.file.uploadPostFile( _.files[0], percentage => {
     * console.log('percentage:', percentage);
     * } ).subscribe( (res:_UPLOAD_RESPONSE) => {
     * this.files.push( res.data );
     * console.log('files: ', this.files);
     * }, err => {
     * console.log('err:', err);
     * if ( this.file.isError(err) == ERROR_NO_FILE_SELECTED ) return;
     * this.file.alert(err);
     * });
     * }
     * \@endcode
     *
     * @param {?} file
     * @param {?=} callback
     *
     * @return {?}
     */
    File.prototype.uploadPostFile = function (file, callback) {
        var /** @type {?} */ req = {
            model: 'post_data',
            code: ''
        };
        return this.upload(req, file, callback);
    };
    return File;
}(Base));
File.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
File.ctorParameters = function () { return [
    { type: Http, },
    { type: ProgressService, },
]; };

var __extends$6 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var PostComment = (function (_super) {
    __extends$6(PostComment, _super);
    /**
     * @param {?} http
     */
    function PostComment(http) {
        return _super.call(this, http, 'post_comment') || this;
    }
    /**
     * @param {?} req
     * @return {?}
     */
    PostComment.prototype.create = function (req) {
        req['route'] = this.taxonomy + '.create';
        return (this.post(req));
    };
    return PostComment;
}(Base));
PostComment.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
PostComment.ctorParameters = function () { return [
    { type: Http, },
]; };

var __extends$7 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var PostConfig = (function (_super) {
    __extends$7(PostConfig, _super);
    /**
     * @param {?} http
     */
    function PostConfig(http) {
        return _super.call(this, http, 'post_config') || this;
    }
    return PostConfig;
}(Base));
PostConfig.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
PostConfig.ctorParameters = function () { return [
    { type: Http, },
]; };

var __extends$8 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var PostData = (function (_super) {
    __extends$8(PostData, _super);
    /**
     * @param {?} http
     */
    function PostData(http) {
        return _super.call(this, http, 'post_data') || this;
    }
    return PostData;
}(Base));
PostData.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
PostData.ctorParameters = function () { return [
    { type: Http, },
]; };

var __extends$9 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var CustomBrowserXhr = (function (_super) {
    __extends$9(CustomBrowserXhr, _super);
    /**
     * @param {?} service
     */
    function CustomBrowserXhr(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    /**
     * @return {?}
     */
    CustomBrowserXhr.prototype.build = function () {
        var _this = this;
        var /** @type {?} */ xhr = _super.prototype.build.call(this);
        // xhr.onprogress = (event) => {            
        //   this.service.downloadProgress.next(event);
        // };
        xhr.upload.onprogress = function (event) {
            if (_this.service)
                _this.service.uploadProgress.next(event);
        };
        return ((xhr));
    };
    return CustomBrowserXhr;
}(BrowserXhr));
CustomBrowserXhr.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CustomBrowserXhr.ctorParameters = function () { return [
    { type: ProgressService, },
]; };

// import { SampleComponent } from './sample.component';
// import { SampleDirective } from './sample.directive';
// import { SamplePipe } from './sample.pipe';
// import { SampleService } from './sample.service';
// export * from './sample.component';
// export * from './sample.directive';
// export * from './sample.pipe';
// export * from './sample.service';
var AngularBackendModule = (function () {
    function AngularBackendModule() {
    }
    /**
     * @return {?}
     */
    AngularBackendModule.forRoot = function () {
        return {
            ngModule: AngularBackendModule,
            providers: [
                //SampleService
                TestAll,
                Backend,
                Meta,
                User,
                File,
                ProgressService,
                PostConfig,
                PostData,
                PostComment,
                Category,
                { provide: BrowserXhr, useClass: CustomBrowserXhr }
            ]
        };
    };
    return AngularBackendModule;
}());
AngularBackendModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [],
                exports: []
            },] },
];
/**
 * @nocollapse
 */
AngularBackendModule.ctorParameters = function () { return []; };

export { AngularBackendModule, TestAll, Backend, Category, File, Meta, PostComment, PostConfig, PostData, User, ERROR_JSON_PARSE, ERROR_NO_ERROR_CODE, ERROR_NO_INTERNET, ERROR_TIMEOUT, ERROR_MC_IS_EMPTY, ERROR_INTERNAL_SERVER_ERROR, ERROR_SESSION_ID_EXIST, ERROR_USER_NOT_FOUND, ERROR_WRONG_SESSION_ID, ERROR_WRONG_SESSION_ID_NO_USER_DATA_BY_THAT_SESSION_ID, API_KEY_SESSION_INFO, ERROR_NO_FILE_SELECTED, RES_ERROR_NO_FILE_SELECTED, ERROR_DISCONNECTED, RES_ERROR_DISCONNECTED, ERROR_REQUIRED_INPUT_IS_MISSING, RES_ERROR_REQUIRED_INPUT_IS_MISSING, ERROR_MODEL_IS_EMPTY, RES_ERROR_MODEL_IS_EMPTY, ERROR_MODEL_IDX_IS_EMPTY, RES_ERROR_MODEL_IDX_EMPTY, ERROR_CODE_IS_EMPTY, RES_ERROR_MODEL_CODE_EMPTY, URL_BACKEND_API, BACKEND_API_CONNECTION_TIMEOUT, NO_OF_ITEMS_PER_PAGE };
